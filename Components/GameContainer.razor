@using dotnet.flappy_bird.Components.TextContainers
@inject IJSRuntime JS

<div id="scene" style="@sceneCss" tabindex="0" @onkeyup="HandleKeyUp">
    <div id="sky">
        <BirdComp Model="gameManager.Bird" />
    </div>
    
    @foreach (var pipe in gameManager.Pipes)
    {
        <PipeComp Model="pipe" />
    }
    
    <div id="ground" style="@groundCss">
    </div>

    <TopBar points="@points" highscore="@highscore" OpenControls="OpenControls"/>
    <Welcome welcomeCss="@welcomeCss"/>
    <GameOver gameOverCss="@gameOverCss"/>

    @* <div id="ui-controls">
        <h2>Controls</h2>

        <label>Speed</label>
        <input type="slider" min="0"/>
    </div> *@

    
</div>

@code {
    GameManager gameManager;

    string sceneCss => $@"
height: {gameManager.SceneHeight}px;
width: {gameManager.SceneWidth}px;
";

    string gameOverCss => $"opacity: {gameManager.UIControls.GameOverTextOpacity};font-size: {gameManager.UIControls.GameOverTextSize}rem;";
    string groundCss => $"height: {gameManager.GroundHeight}px;";

    string welcomeCss => $"display: {GetWelcomeStyle()};";
    int points => (int) gameManager.Points;
    int highscore => (int) gameManager.HighScore;
    protected override void OnInitialized()
    {
        gameManager = new GameManager();
        gameManager.MainLoopCompleted += (o, e) => StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) JS.InvokeAsync<string>("focus", "scene");
    }

    protected void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == " ") {
            if (!gameManager.IsRunning) {
                gameManager.StartGame();
            } else {
                gameManager.Jump();
            }
        }
    }

    protected void OpenControls() {
        Console.WriteLine("Open Controls");
    }

    string GetWelcomeStyle() {
        return gameManager.DisplayWelcomeText ? "grid": "none";
    }
}